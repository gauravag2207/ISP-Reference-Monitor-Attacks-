"""
This security layer inadequately handles A/B storage for files in RepyV2.
Gaurav Agrawal
ga1380


Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  open_files = {}
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.filename = filename
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # make the files and add 'SE' to the readat file...
    if create: # If Create is given as True
      ABFile.open_files[filename] = True
      if self.Afn not in listfiles():                                   # if A file is not present
                   # Creating A and B files where A would be written with SE and B would be empty
        self.Afile = openfile(self.Afn,create)                          # create a A file
        self.Bfile = openfile(self.Bfn,create)                          # create the backup B file
        self.Afile.lock= createlock()                                   # create a lock on A file
        self.Afile.lock.acquire(True)                                   # Acquire the lock on A file
        self.Afile.writeat('SE',0)                                      # Write SE to the A file
        self.Afile.lock.release()                                       # Release the lock on A file
      
      else:      # If A file is already present, File B is created and the data from A is copied to B
        self.Afile = openfile(self.Afn,False)
        self.Bfile = openfile(self.Bfn,create)
        self.Bfile.lock= createlock()
        self.Bfile.lock.acquire(True)
        self.Bfile.writeat(self.Afile.readat(None,0),0)
        self.Bfile.lock.release()

    else: # if Create is false
      if self.Afn in listfiles():
        ABFile.open_files[filename] = True
        self.Afile = openfile(self.Afn,create)
        self.Bfile = openfile(self.Bfn,create)
      else:
        return



  def writeat(self,data,offset):
    
    # Write the requested data to the B file using the sandbox's writeat call
    try:
      self.Bfile.writeat(data,offset)
    except Exception as e:
      return
  
  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    try:
      data = self.Afile.readat(bytes,offset)
      return data
    except Exception as e:
      return ""

  def close(self):
    try:
      # log('closing')
      dataB=self.Bfile.readat(None,0)
      dataA=self.Afile.readat(None,0)
      if dataB.startswith("S") and dataB.endswith("E"):                 # Valid Data in B File
        self.Afile.close()                                              # close the old A file
        if (self.Afn in listfiles()):
            removefile(self.Afn)                                        # remove the old A file
        self.Afile = openfile(self.Afn,True)                            # create a new A file
        self.Afile.lock= createlock()                                   # create a lock on A file
        self.Afile.lock.acquire(True)                                   # Acquire the lock on A file
        self.Afile.writeat(dataB,0)                                     # write new valid data to the new A file
        self.Afile.lock.release()                                       # Release the lock on A file
      else:                                                             # invalid data in B file
        self.Bfile.close()                                              # close the old B file
        removefile(self.Bfn)                                            # remove the old B file
        self.Bfile = openfile(self.Bfn, True)                           # create a new B file
        self.Bfile.lock= createlock()                                   # create a lock on B file
        self.Bfile.lock.acquire(True)                                   # Acquire the lock on B file
        self.Bfile.writeat(dataA,0)                                     # write original data to the new B file
        self.Bfile.lock.release()                                       # Release the lock on A file
        
      self.Afile.close()
      self.Bfile.close()
      ABFile.open_files[self.filename] = False
    except Exception as e:
      # log(e)
      return


def ABopenfile(filename, create):
  # log(ABFile.open_files)
  if filename in ABFile.open_files:
    # log(ABFile.open_files)
    if ABFile.open_files[filename]:
      raise Exception('File already open','Dummy')
      return None
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()